
/*ЗАДАЧА  после  Спринт 6/17 → Тема 4/5: Top-level функции → Урок 1/3

Необходимо изменить работу класса CatDownloaderV2 так, чтобы он соответствовал трём главным требованиям:
1. Котики должны показываться по мере их загрузки. Как лента в приложении соцсетей отображается постепенно, так и котики должны являться пользователю по мере их загрузки.
2. Если при загрузке котика произошла ошибка (метод getCatFromInternet() вернул null), мы должны показать пользователю ошибку, а не null котика.
3. После того как все котики загрузятся, нужно сообщить пользователю , что в интернете котиков больше нет.
Для этого необходимо изменить метод downloadCats() так, чтобы он на вход принимал 4 параметра:
 - Количество котиков, которые хочет загрузить пользователь (Int).
 - Функцию onNext, которая будет выполняться каждый раз, когда новый котик загружается. Функция в качестве аргумента должна иметь один параметр Cat и ничего не возвращать Unit.
 - Функцию onComplete, которая будет выполнена, когда все котики будут загружены. Функция не должна иметь аргументов и ничего не будет возвращать.
 - Функцию onError, которая будет выполняться всякий раз, когда загрузка котиков будет выдавать ошибку (возвращать null).
 - Функция downloadCats() должна запускать цикл (количество итераций == количеству котиков, которые хочет загрузить пользователь). На каждой итерации цикл должен пытаться загрузить котика.
Если котик загружен успешно, вызывать функцию onNext и передавать в неё котика.
Если котик загружен с ошибкой (метод getCatFromInternet() вернул null), то вызывать функцию onError.
Когда все котики будут загружены, должна быть вызвана функция onComplete.

После чего нужно создать объект CatDownloaderV2 и вызвать у него метод downloadCats().
Количество котиков, которые должны быть загружены, берутся из переменной-константы CATS_COUNT.
После загрузки каждого котика в лог, должно выводиться сообщение «Котик {имя котика} успешно загружен». Используйте метод showCat().
Если во время загрузки котика произошла ошибка, то показать сообщение «Упс. При загрузке котика произошла ошибка :(» — метод showError().
По завершению загрузки нужно показать сообщение: «Загрузка котиков завершена» — метод showComplete().*/

import kotlin.random.Random

fun main() {
    val catDownloaderV2 = CatDownloaderV2()

    // перепишите данную реализацию согласно требованиям в задаче
    val downloadedCats = catDownloaderV2.downloadCats(CATS_COUNT,
        onNext = {cat -> println("Котик ${cat.name} успешно загружен")},
        onComplete = {println("Загрузка котиков завершена")},
        onError = {println("Упс. При загрузке котика произошла ошибка :(")},
        )
}

// константа для выбора количества загруженных котиков
const val CATS_COUNT = 5



class CatDownloaderV2 {

    // перепишите метод согласно заданию. Используйте функции в качестве параметров для реагирования на события загрузки котиков
//    - Количество котиков, которые хочет загрузить пользователь (Int).
//    - Функцию onNext, которая будет выполняться каждый раз, когда новый котик загружается. Функция в качестве аргумента должна иметь один параметр Cat и ничего не возвращать Unit.
//    - Функцию onComplete, которая будет выполнена, когда все котики будут загружены. Функция не должна иметь аргументов и ничего не будет возвращать.
//    - Функцию onError, которая будет выполняться всякий раз, когда загрузка котиков будет выдавать ошибку (возвращать null).
//    Функция downloadCats() должна запускать цикл (количество итераций == количеству котиков, которые хочет загрузить пользователь). На каждой итерации цикл должен пытаться загрузить котика.
    fun downloadCats(count: Int,
                     onNext: (Cat) -> Unit,
                     onComplete: () -> Unit,
                     onError: () -> Unit
                     ): List<Cat?> {
        val catsList = mutableListOf<Cat?>()
        while (catsList.size<count) {
            val cat = getCatFromInternet()
            if (cat != null) {
                onNext (cat)
                catsList.add(cat)

            } else {
                onError()
            }

        }
        onComplete ()
        return catsList;
    }

    // этот метод переписывать не нужно. Но если вам хочется добавить разнообразия — вы можете придумать свою логику генерации котиков ¯\_(ツ)_/¯
    private fun getCatFromInternet(): Cat? {
        return when (Random.nextInt(5)) {
            0 -> null
            1 -> Cat("Борис")
            2 -> Cat("Кузьма")
            3 -> Cat("Барсик")
            4 -> Cat("Кефирчик")
            else -> null
        }
    }
}

data class Cat(val name: String)